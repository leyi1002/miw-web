<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="com.miw.rabbitmq"/>
    <!--配置connection-factory，指定连接rabbit server参数 -->
    <rabbit:connection-factory id="connectionFactory" username="rabbitmq" password="123123" host="47.93.200.10"
                               port="5672" publisher-confirms="true" publisher-returns="true"/>

    <!--定义rabbit template用于数据的接收和发送
    confirm-callback:消息确认回调,确认消息是否到达broker服务器，也就是只确认是否正确到达exchange中即可，只要正确的到达exchange中，broker即可确认该消息返回给客户端ack
    return-callBack:消息发送失败回调,消息是发送至queue失败时回调
    -->
    <rabbit:template id="amqpTemplate" connection-factory="connectionFactory"
                     exchange="directExc" confirm-callback="confirmCallBack" return-callback="returnCallBack" mandatory="true"/>

    <!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->
    <rabbit:admin connection-factory="connectionFactory"/>

    <!--定义queue -->
    <rabbit:queue name="direcrQueue" durable="true" auto-delete="false" exclusive="false"/>
    <rabbit:queue name="fanoutQueue1" durable="true" auto-delete="false" exclusive="false"/>
    <rabbit:queue name="fanoutQueue2" durable="true" auto-delete="false" exclusive="false"/>
    <rabbit:queue name="topQueue" durable="true" auto-delete="false" exclusive="false"/>
    <rabbit:queue name="botQueue" durable="true" auto-delete="false" exclusive="false"/>

    <!-- 定义direct exchange，绑定 direcrQueue -->
    <rabbit:direct-exchange name="directExc" durable="true" auto-delete="false">
        <rabbit:bindings>
            <rabbit:binding queue="direcrQueue" key="queueTestKey"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <!-- 定义fanout exchange, 绑定 fanoutQueue1,fanoutQueue2-->
    <rabbit:fanout-exchange name="fanoutExc" durable="true" auto-delete="false">
        <rabbit:bindings>
            <rabbit:binding queue="fanoutQueue1"/>
            <rabbit:binding queue="fanoutQueue2"/>
        </rabbit:bindings>
    </rabbit:fanout-exchange>

    <!-- 定义topic exchange, 绑定-->
    <rabbit:topic-exchange name="topicExc" durable="true" auto-delete="false">
        <rabbit:bindings>
            <rabbit:binding queue="topQueue" pattern="*.miw.top.*"/>
            <rabbit:binding queue="botQueue" pattern="*.miw.bot.*"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>

    <!-- queue litener  观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象-->
    <rabbit:listener-container connection-factory="connectionFactory">
        <rabbit:listener queues="direcrQueue" ref="messageConsumer"/>
        <rabbit:listener queues="fanoutQueue1" ref="fanoutConsumer1"/>
        <rabbit:listener queues="fanoutQueue2" ref="fanoutConsumer2"/>
        <rabbit:listener queues="topQueue" ref="topicConsumer1"/>
        <rabbit:listener queues="botQueue" ref="topicConsumer2"/>
    </rabbit:listener-container>
</beans>